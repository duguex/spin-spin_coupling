import json
import numpy as np
from sympy import symbols, E, integrate, diff, lambdify
from sympy.plotting import plot
from scipy.optimize import curve_fit, root
import matplotlib.pyplot as plt
from uncertainties import unumpy, ufloat

fig_type = "png"

dL_L = [0, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188, 0.01872188,
        0.01872188, 0.01872188, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307,
        0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307,
        0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307,
        0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.03744307, 0.05616355,
        0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355,
        0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355,
        0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.05616355, 0.07488333, 0.07488333, 0.07488333, 0.07488333,
        0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333,
        0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.07488333, 0.09360241, 0.09360241, 0.09360241,
        0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241,
        0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.09360241, 0.11232079, 0.11232079, 0.11232079, 0.11232079,
        0.11232079, 0.11232079, 0.11232079, 0.11232079, 0.11232079, 0.11232079, 0.11232079, 0.11232079, 0.11232079,
        0.11232079, 0.11232079, 0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.13103847,
        0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.13103847, 0.14975545, 0.14975545, 0.14975545,
        0.14975545, 0.14975545, 0.14975545, 0.14975545, 0.14975545, 0.14975545, 0.14975545, 0.14975545, 0.14975545,
        0.16847172, 0.16847172, 0.16847172, 0.16847172, 0.16847172, 0.16847172, 0.16847172, 0.16847172, 0.16847172,
        0.16847172, 0.16847172, 0.16847172, 0.1871873, 0.1871873, 0.1871873, 0.1871873, 0.1871873, 0.1871873, 0.1871873,
        0.1871873, 0.1871873, 0.1871873, 0.1871873, 0.20590218, 0.20590218, 0.20590218, 0.20590218, 0.20590218,
        0.20590218, 0.20590218, 0.20590218, 0.20590218, 0.20590218, 0.22461635, 0.22461635, 0.22461635, 0.22461635,
        0.22461635, 0.22461635, 0.22461635, 0.22461635, 0.22461635, 0.22461635, 0.24332983, 0.24332983, 0.24332983,
        0.24332983, 0.24332983, 0.24332983, 0.24332983, 0.24332983, 0.24332983, 0.26204261, 0.26204261, 0.26204261,
        0.26204261, 0.26204261, 0.26204261, 0.26204261, 0.26204261, 0.26204261, 0.26204261, 0.28075468, 0.28075468,
        0.28075468, 0.28075468, 0.28075468, 0.28075468, 0.28075468, 0.28075468, 0.29946606, 0.29946606, 0.29946606,
        0.29946606, 0.29946606, 0.29946606, 0.29946606, 0.29946606, 0.29946606, 0.31817674, 0.31817674, 0.31817674,
        0.31817674, 0.31817674, 0.31817674, 0.31817674, 0.31817674, 0.33688671, 0.33688671, 0.33688671, 0.33688671,
        0.33688671, 0.33688671, 0.33688671, 0.33688671, 0.35559599, 0.35559599, 0.35559599, 0.35559599, 0.35559599,
        0.35559599, 0.35559599, 0.35559599, 0.37430456, 0.37430456, 0.37430456, 0.37430456, 0.37430456, 0.37430456,
        0.37430456, 0.37430456, 0.39301244, 0.39301244, 0.39301244, 0.39301244, 0.39301244, 0.39301244, 0.39301244,
        0.41171962, 0.41171962, 0.41171962, 0.41171962, 0.41171962, 0.41171962, 0.41171962, 0.43042609, 0.43042609,
        0.43042609, 0.43042609, 0.43042609, 0.43042609, 0.43042609, 0.44913187, 0.44913187, 0.44913187, 0.44913187,
        0.44913187, 0.44913187, 0.44913187, 0.44913187, 0.46783695, 0.46783695, 0.46783695, 0.46783695, 0.46783695,
        0.46783695, 0.48654133, 0.48654133, 0.48654133, 0.48654133, 0.48654133, 0.48654133, 0.48654133, 0.50524501,
        0.50524501, 0.50524501, 0.50524501, 0.50524501, 0.50524501, 0.50524501, 0.52394799, 0.52394799, 0.52394799,
        0.52394799, 0.52394799, 0.52394799, 0.54265027, 0.54265027, 0.54265027, 0.54265027, 0.54265027, 0.54265027,
        0.54265027, 0.56135185, 0.56135185, 0.56135185, 0.56135185, 0.56135185, 0.56135185, 0.58005274, 0.58005274,
        0.58005274, 0.58005274, 0.58005274, 0.58005274, 0.58005274, 0.59875292, 0.59875292, 0.59875292, 0.59875292,
        0.59875292, 0.59875292, 0.6174524, 0.6174524, 0.6174524, 0.6174524, 0.6174524, 0.6174524, 0.63615119,
        0.63615119, 0.63615119, 0.63615119, 0.63615119, 0.63615119, 0.65484928, 0.65484928, 0.65484928, 0.65484928,
        0.65484928, 0.65484928, 0.67354667, 0.67354667, 0.67354667, 0.67354667, 0.67354667, 0.67354667, 0.69224336,
        0.69224336, 0.69224336, 0.69224336, 0.69224336, 0.69224336, 0.71093935, 0.71093935, 0.71093935, 0.71093935,
        0.71093935, 0.71093935, 0.72963464, 0.72963464, 0.72963464, 0.72963464, 0.72963464, 0.72963464, 0.74832923,
        0.74832923, 0.74832923, 0.74832923, 0.74832923, 0.76702313, 0.76702313, 0.76702313, 0.76702313, 0.76702313,
        0.76702313, 0.78571633, 0.78571633, 0.78571633, 0.78571633, 0.78571633, 0.78571633, 0.80440883, 0.80440883,
        0.80440883, 0.80440883, 0.80440883, 0.82310063, 0.82310063, 0.82310063, 0.82310063, 0.82310063, 0.82310063,
        0.84179173, 0.84179173, 0.84179173, 0.84179173, 0.84179173, 0.86048213, 0.86048213, 0.86048213, 0.86048213,
        0.86048213, 0.86048213, 0.87917184, 0.87917184, 0.87917184, 0.87917184, 0.87917184, 0.89786085, 0.89786085,
        0.89786085, 0.89786085, 0.89786085, 0.91654916, 0.91654916, 0.91654916, 0.91654916, 0.91654916, 0.91654916,
        0.93523677, 0.93523677, 0.93523677, 0.93523677, 0.93523677, 0.95392369, 0.95392369, 0.95392369, 0.95392369,
        0.95392369, 0.9726099, 0.9726099, 0.9726099, 0.9726099, 0.9726099, 0.99129542, 0.99129542, 0.99129542,
        0.99129542, 0.99129542, 0.99129542, 1.00998025, 1.00998025, 1.00998025, 1.00998025, 1.00998025, 1.02866437,
        1.02866437, 1.02866437, 1.02866437, 1.02866437, 1.0473478, 1.0473478, 1.0473478, 1.0473478, 1.0473478,
        1.06603053, 1.06603053, 1.06603053, 1.06603053, 1.06603053, 1.08471256, 1.08471256, 1.08471256, 1.08471256,
        1.08471256, 1.1033939, 1.1033939, 1.1033939, 1.1033939, 1.1033939, 1.12207453, 1.12207453, 1.12207453,
        1.12207453, 1.12207453, 1.14075447, 1.14075447, 1.14075447, 1.14075447, 1.14075447, 1.15943372, 1.15943372,
        1.15943372, 1.15943372, 1.15943372, 1.17811226, 1.17811226, 1.17811226, 1.17811226, 1.17811226, 1.19679011,
        1.19679011, 1.19679011, 1.19679011, 1.19679011, 1.21546727, 1.21546727, 1.21546727, 1.21546727, 1.21546727,
        1.23414372, 1.23414372, 1.23414372, 1.23414372, 1.23414372, 1.25281948, 1.25281948, 1.25281948, 1.25281948,
        1.27149455, 1.27149455, 1.27149455, 1.27149455, 1.27149455, 1.29016891, 1.29016891, 1.29016891, 1.29016891,
        1.29016891, 1.30884258, 1.30884258, 1.30884258, 1.30884258, 1.30884258, 1.32751555, 1.32751555, 1.32751555,
        1.32751555, 1.34618783, 1.34618783, 1.34618783, 1.34618783, 1.34618783, 1.36485941, 1.36485941, 1.36485941,
        1.36485941, 1.36485941, 1.3835303, 1.3835303, 1.3835303, 1.3835303, 1.3835303, 1.40220048, 1.40220048,
        1.40220048, 1.40220048, 1.42086998, 1.42086998, 1.42086998, 1.42086998, 1.42086998, 1.43953877, 1.43953877,
        1.43953877, 1.43953877, 1.43953877, 1.45820687, 1.45820687, 1.45820687, 1.45820687, 1.47687427, 1.47687427,
        1.47687427, 1.47687427, 1.47687427, 1.49554098, 1.49554098, 1.49554098, 1.49554098, 1.51420699, 1.51420699,
        1.51420699, 1.51420699, 1.51420699, 1.53287231, 1.53287231, 1.53287231, 1.53287231, 1.53287231, 1.55153693,
        1.55153693, 1.55153693, 1.55153693, 1.57020086, 1.57020086, 1.57020086, 1.57020086, 1.57020086, 1.58886409,
        1.58886409, 1.58886409, 1.58886409, 1.60752662, 1.60752662, 1.60752662, 1.60752662, 1.60752662, 1.62618846,
        1.62618846, 1.62618846, 1.62618846, 1.6448496, 1.6448496, 1.6448496, 1.6448496, 1.6448496, 1.66351005,
        1.66351005, 1.66351005, 1.66351005, 1.6821698, 1.6821698, 1.6821698, 1.6821698, 1.6821698, 1.70082886,
        1.70082886, 1.70082886, 1.70082886, 1.71948722, 1.71948722, 1.71948722, 1.71948722, 1.73814489, 1.73814489,
        1.73814489, 1.73814489, 1.73814489, 1.75680186, 1.75680186, 1.75680186, 1.75680186, 1.77545814, 1.77545814,
        1.77545814, 1.77545814, 1.77545814, 1.79411372, 1.79411372, 1.79411372, 1.79411372, 1.81276861, 1.81276861,
        1.81276861, 1.81276861, 1.8314228, 1.8314228, 1.8314228, 1.8314228, 1.8314228, 1.8500763, 1.8500763, 1.8500763,
        1.8500763, 1.8687291, 1.8687291, 1.8687291, 1.8687291, 1.8687291, 1.88738121, 1.88738121, 1.88738121,
        1.88738121, 1.90603263, 1.90603263, 1.90603263, 1.90603263, 1.92468335, 1.92468335, 1.92468335, 1.92468335,
        1.92468335, 1.94333337, 1.94333337, 1.94333337, 1.94333337, 1.9619827, 1.9619827, 1.9619827, 1.9619827,
        1.98063134, 1.98063134, 1.98063134, 1.98063134, 1.99927928, 1.99927928, 1.99927928, 1.99927928, 1.99927928,
        2.01792653, 2.01792653, 2.01792653, 2.01792653, 2.03657309, 2.03657309, 2.03657309, 2.03657309, 2.05521895,
        2.05521895, 2.05521895, 2.05521895, 2.07386412, 2.07386412, 2.07386412, 2.07386412, 2.07386412, 2.09250859,
        2.09250859, 2.09250859, 2.09250859, 2.11115237, 2.11115237, 2.11115237, 2.11115237, 2.12979546, 2.12979546,
        2.12979546, 2.12979546, 2.14843785, 2.14843785, 2.14843785, 2.14843785, 2.14843785, 2.16707955, 2.16707955,
        2.16707955, 2.16707955, 2.18572055, 2.18572055, 2.18572055, 2.18572055, 2.20436087, 2.20436087, 2.20436087,
        2.20436087, 2.22300048, 2.22300048, 2.22300048, 2.22300048, 2.24163941, 2.24163941, 2.24163941, 2.24163941,
        2.24163941, 2.26027764, 2.26027764, 2.26027764, 2.26027764, 2.27891518, 2.27891518, 2.27891518, 2.27891518,
        2.29755203, 2.29755203, 2.29755203, 2.29755203, 2.31618818, 2.31618818, 2.31618818, 2.31618818, 2.33482364,
        2.33482364, 2.33482364, 2.33482364, 2.3534584, 2.3534584, 2.3534584, 2.3534584, 2.3534584, 2.37209248,
        2.37209248, 2.37209248, 2.37209248, 2.39072586, 2.39072586, 2.39072586, 2.39072586, 2.40935855, 2.40935855,
        2.40935855, 2.40935855, 2.42799054, 2.42799054, 2.42799054, 2.42799054, 2.44662185, 2.44662185, 2.44662185,
        2.44662185, 2.46525246, 2.46525246, 2.46525246, 2.46525246, 2.48388238, 2.48388238, 2.48388238, 2.48388238,
        2.5025116, 2.5025116, 2.5025116, 2.5025116, 2.52114014, 2.52114014, 2.52114014, 2.52114014, 2.53976798,
        2.53976798, 2.53976798, 2.53976798, 2.53976798, 2.55839513, 2.55839513, 2.55839513, 2.55839513, 2.57702158,
        2.57702158, 2.57702158, 2.57702158, 2.59564735, 2.59564735, 2.59564735, 2.59564735, 2.61427242, 2.61427242,
        2.61427242, 2.61427242, 2.6328968, 2.6328968, 2.6328968, 2.6328968, 2.65152049, 2.65152049, 2.65152049,
        2.65152049, 2.67014349, 2.67014349, 2.67014349, 2.67014349, 2.68876579, 2.68876579, 2.68876579, 2.68876579,
        2.70738741, 2.70738741, 2.70738741, 2.70738741, 2.72600833, 2.72600833, 2.72600833, 2.72600833, 2.74462856,
        2.74462856, 2.74462856, 2.74462856, 2.7632481, 2.7632481, 2.7632481, 2.7632481, 2.78186694, 2.78186694,
        2.78186694, 2.78186694, 2.8004851, 2.8004851, 2.8004851, 2.8004851, 2.81910257, 2.81910257, 2.81910257,
        2.81910257, 2.83771934, 2.83771934, 2.83771934, 2.83771934, 2.85633542, 2.85633542, 2.85633542, 2.85633542,
        2.87495081, 2.87495081, 2.87495081, 2.87495081, 2.89356551, 2.89356551, 2.89356551, 2.89356551, 2.91217952,
        2.91217952, 2.91217952, 2.91217952, 2.93079284, 2.93079284, 2.93079284, 2.93079284, 2.94940547, 2.94940547,
        2.94940547, 2.94940547, 2.9680174, 2.9680174, 2.9680174, 2.9680174, 2.98662865, 2.98662865, 2.98662865,
        2.98662865, 3.00523921, 3.00523921, 3.00523921, 3.00523921, 3.02384907, 3.02384907, 3.02384907, 3.02384907,
        3.04245824, 3.04245824, 3.04245824, 3.04245824, 3.06106673, 3.06106673, 3.06106673, 3.06106673, 3.07967452,
        3.07967452, 3.07967452, 3.07967452, 3.09828162, 3.09828162, 3.09828162, 3.09828162, 3.11688804, 3.11688804,
        3.11688804, 3.11688804, 3.13549376, 3.13549376, 3.13549376, 3.15409879, 3.15409879, 3.15409879, 3.15409879,
        3.17270313, 3.17270313, 3.17270313, 3.17270313, 3.19130679, 3.19130679, 3.19130679, 3.19130679, 3.20990975,
        3.20990975, 3.20990975, 3.20990975, 3.22851202, 3.22851202, 3.22851202, 3.22851202, 3.2471136, 3.2471136,
        3.2471136, 3.2471136, 3.26571449, 3.26571449, 3.26571449, 3.26571449, 3.2843147, 3.2843147, 3.2843147,
        3.2843147, 3.30291421, 3.30291421, 3.30291421, 3.30291421, 3.32151303, 3.32151303, 3.32151303, 3.32151303,
        3.34011117, 3.34011117, 3.34011117, 3.35870861, 3.35870861, 3.35870861, 3.35870861, 3.37730537, 3.37730537,
        3.37730537, 3.37730537, 3.39590143]


def einstein_model():
    """
        einstein_function is alpha (1/L dL/dT) better from 5 K
        integrated_Einstein_function is delta L/L better from 2 K
    """
    _t, x, theta = symbols("T X theta")
    einstein_function = x * (theta / _t) ** 2 * E ** (theta / _t) / (E ** (theta / _t) - 1) ** 2
    integrated_Einstein_function = integrate(einstein_function, _t)
    derivative_Einstein_function = diff(einstein_function, _t, 1)
    # for below 1000 K
    c1 = np.array([0.0096, 0.2656, 2.6799, 2.3303]) * 1e-6
    c2 = np.array([159.3, 548.5, 1237.9, 2117.8])
    return [lambdify(_t, sum([func.subs(x, c1[n]).subs(theta, c2[n]) for n in range(4)]), "numpy")
            for func in [einstein_function, integrated_Einstein_function, derivative_Einstein_function]]


def murnaghan_eos(_V, _a, _b, _c, _d):
    # _f = 0.5 * (np.power(_V0 / _V, 1.5) - 1)
    # _g = _a + _b * _f + _c * _f ** 2 + _d * _f ** 3
    _f = _a + _b * _V ** -1.5 + _c * _V ** -3 + _d * _V ** -4.5
    return _f


def get_volume_with_murnaghan_eos(coef_list, p):
    a, b, c, d = unumpy.nominal_values(coef_list)

    symbol_free_energy = murnaghan_eos(symbol_V, symbol_a, symbol_b, symbol_c, symbol_d)
    symbol_pressure = -diff(symbol_free_energy, symbol_V)
    diff_list = [diff(symbol_pressure, sym) for sym in [symbol_a, symbol_b, symbol_c, symbol_d, symbol_V]]

    symbol_pressure = symbol_pressure.subs(symbol_a, a).subs(symbol_b, b).subs(symbol_c, c).subs(symbol_d, d)
    V = root(lambdify(symbol_V, symbol_pressure - p * GPa2eV_A3 * static_volume), x0=np.array(1.)).x[0]

    eval_diff_list = np.array(
        [sym.subs(symbol_a, a).subs(symbol_b, b).subs(symbol_c, c).subs(symbol_d, d).subs(symbol_V, V)
         for sym in diff_list])
    V_error = np.linalg.norm((eval_diff_list[:-1] * unumpy.std_devs(coef_list)).astype(float)) / abs(eval_diff_list[-1])

    # return ufloat(V, V_error)
    return V


if __name__ == "__main__":
    metadata_dir = r"C:\Users\dugue\Desktop\metadata"
    work_dir = r"C:\Users\dugue\OneDrive\spin-spin\444_520_PS"
    prefix = "611"
    eV2J = 1.602176565e-19
    angstrom2m = 1e-10
    GPa2eV_A3 = 1 / (eV2J / angstrom2m ** 3 / 1e9)
    K = 8.6173e-05
    energy = {0.95: -.47936793E+04,
              0.96: -.48331879E+04,
              0.97: -.48629962E+04,
              0.98: -.48836303E+04,
              0.99: -.48956958E+04,
              1.0: -.48998555E+04,
              1.01: -.48966031E+04,
              1.02: -.48866610E+04,
              1.03: -.48707004E+04,
              1.04: -.48490643E+04,
              1.05: -.48222608E+04,
              1.005: -4.8990798E+03,
              1.015: -4.8924040E+03,
              1.025: -4.8794282E+03}
    for scale in energy:
        energy[scale] -= -.48998555E+04

    static_volume = 2880.93
    scale_list = np.array([0.97, 0.98, 0.99, 1.0, 1.005, 1.01, 1.015, 1.02, 1.025, 1.03])
    equilibrium_index = np.where(scale_list == 1.)
    volume_list = scale_list ** 3
    volume_sample = np.linspace(volume_list[0], volume_list[-1], 1000)
    pressure_sample = np.linspace(-10, 30, 81)
    assert 0 in pressure_sample, "equilibrium volume should included in sample."
    temperature_sample = np.linspace(0, 1200, 121)

    # murnaghan_eos
    symbol_V, symbol_a, symbol_b, symbol_c, symbol_d = symbols("V a b c d")
    # -----------------------------------------------------------
    # calculating free energy and saving to free_energy.json

    # free_energy_list = []
    # for scale in scale_list:
    #     _, frequency, _ = json.load(open(metadata_dir + f"/mode_{scale}.json", "r"))
    #     frequency = np.array(frequency[3:])
    #
    #     for t in temperature_sample:
    #         free_energy = energy[scale] \
    #                       + sum(frequency) / 2 + (K * t) * sum(np.log(1 - np.e ** (-frequency / (K * t))))
    #         free_energy_list.append(free_energy)
    # assert len(free_energy_list) == len(scale_list) * temperature_sample.shape[0]
    # json.dump(free_energy_list, open(work_dir + f"/free_energy_121_{prefix}.json", "w"))
    # ----------------------------------------------------------------------------
    # free_energy_list.shape = (scale_list, temperature_sample)

    free_energy_list = json.load(open(work_dir + f"/free_energy_121_{prefix}.json", "r"))
    free_energy_list = np.array(free_energy_list).reshape(len(scale_list), -1).T
    # ---------------------------------------------------------------------------
    # eos_fitting

    # eos_coef = {}
    # for free_energy_under_T, t in zip(free_energy_list, temperature_sample):
    #     # coef, cov = curve_fit(murnaghan_eos, volume_list, free_energy_under_T,
    #     #                       bounds=([-1000, -2000, 3000, -100, 3000],
    #     #                               [1000, -500, 4000, 0, 5000]))
    #     # coef, cov = curve_fit(murnaghan_eos, volume_list, free_energy_under_T,
    #     #                       bounds=([-1000, -3000, 1000, -500, 5000],
    #     #                               [1500, -1000, 4000, -100, 7000]))
    #     coef, cov = curve_fit(murnaghan_eos, volume_list, free_energy_under_T,
    #                           bounds=([2000, -9000, 5000, -1500],
    #                                   [3000, -6000, 6000, -1000]))
    #     eos_coef[t] = [coef.tolist(), np.sqrt(np.diag(cov)).tolist()]
    # json.dump(eos_coef, open(work_dir + f"/eos_coef_121_{prefix}.json", "w"))
    # -----------------------------------------------------------------------------
    # get classical volume under pressure via EOS (elastic results may not comparable)

    # coef, cov = curve_fit(murnaghan_eos, volume_list, [energy[scale] for scale in scale_list],
    #                       bounds=([2000, -9000, 4000, -1500],
    #                               [3000, -6000, 6000, -1000]))
    # json.dump([coef.tolist(), np.sqrt(np.diag(cov)).tolist()], open(work_dir + f"/eos_coef_cls_{prefix}.json", "w"))
    # ------------------------------------------------------------------------
    # dump eos

    # eos_coef = json.load(open(work_dir + f"/eos_coef_121_{prefix}.json", "r"))
    #
    # eos = []
    # pv_0K = {"pressure": [],
    #          "phonon": [],
    #          "classical": []}
    #
    # for t in temperature_sample:
    #     # single fit at T
    #     coef, error = eos_coef[str(t)]
    #     coef_with_uncertainty = unumpy.uarray(coef, error)
    #
    #     for pressure in pressure_sample:
    #         volume = get_volume_with_murnaghan_eos(coef_with_uncertainty, pressure)
    #         scale = volume ** (1 / 3)
    #         free_energy = murnaghan_eos(volume, *coef)
    #         if t == 0:
    #             pv_0K["phonon"].append(scale)
    #         eos.append([pressure, t, scale])
    #
    # json.dump(eos, open(work_dir + f"/eos_ptv_81_121_{prefix}.json", "w"))
    #
    # coef, error = json.load(open(work_dir + f"/eos_coef_cls_{prefix}.json", "r"))
    # for pressure in pressure_sample:
    #     volume = get_volume_with_murnaghan_eos(coef, pressure)
    #     scale = volume ** (1 / 3)
    #     pv_0K["classical"].append(scale)
    # pv_0K["pressure"] = pressure_sample.tolist()
    # json.dump(pv_0K, open(work_dir + f"\pv_0K_{prefix}.json", "w"))
    # --------------------------------------------------------------
    # plot fitting eos

    eos_coef = json.load(open(work_dir + "/eos_coef_61_64.json", "r"))
    equilibrium_volume = {pressure: [] for pressure in pressure_sample}

    fig = plt.figure()
    ax1 = fig.add_subplot(111)

    ax1.plot([volume_list[equilibrium_index], volume_list[equilibrium_index]],
             [free_energy_list[0][equilibrium_index], free_energy_list[-1][equilibrium_index]], "k--",
             label="classical")

    for free_energy_under_T, t in zip(free_energy_list, temperature_sample):
        coef, error = eos_coef[str(t)]
        free_energy_sample = murnaghan_eos(volume_sample, *coef)
        coef_with_uncertainty = unumpy.uarray(coef, error)

        ax1.scatter(volume_list, free_energy_under_T, c="k")
        ax1.plot(volume_sample, free_energy_sample, "k")
        for pressure in pressure_sample:
            volume = get_volume_with_murnaghan_eos(coef_with_uncertainty, pressure)
            free_energy = murnaghan_eos(volume, *coef)
            equilibrium_volume[pressure].append([volume, free_energy])

    for pressure in pressure_sample:
        _equilibrium_volume = np.array(equilibrium_volume[pressure]).T
        ax1.scatter(*_equilibrium_volume, marker="x")
        ax1.plot(*_equilibrium_volume, label=f"{round(pressure)} GPa")
    ax1.set_xlabel(r'$\frac{V}{V_{\rm cls}}$')
    ax1.set_ylabel('$U_{el}$ + $F_{ph}$ (eV)')
    plt.legend()
    # --------------------------------------------------------------------------------------
    # plot zero-point expansion

    # pv_0K = json.load(open(work_dir + "\pv_0K_64.json", "r"))
    # _pressure_sample = pv_0K["pressure"]
    # _classical = np.array(pv_0K["classical"]) - 1
    # _phonon = np.array(pv_0K["phonon"]) - 1
    #
    # fig = plt.figure()
    # ax3 = fig.add_subplot(111)
    #
    # ax3.plot(_pressure_sample, _classical * 1e3, label="classic")
    # ax3.plot(_pressure_sample, _phonon * 1e3, label="0 K")
    # ax3.plot(_pressure_sample, (_phonon - _classical) * 1e3, label="diff")
    # ax3.plot([_pressure_sample[0], _pressure_sample[-1]], [0, 0], "k--")
    # ax3.set_xlabel("$P$ (GPa)")
    # ax3.set_ylabel(r"$\frac{\delta L}{L_{\rm cls}}$ (×10$^{-3}$)")
    # plt.legend()
    # plt.tight_layout()
    # plt.show()
    # ----------------------------------------------------------------------------------------------
    # show calculated and experimental thermal expansion of diamond below 1200 K

    # dL_L = 1e-3 * np.array(dL_L[6:])
    # T = np.linspace(6, 1200, 1195)
    # forth_order_polynomial = lambda x, a, b, c: a * x ** 4 + b * x ** 3 + c * x ** 2
    # coef, _ = curve_fit(forth_order_polynomial, T, dL_L)
    # coef = np.append(coef, [0, 0])
    # print(coef)
    # ---------------------------------------------------------------------------
    # from equilibrium_volume plot thermal expansion
    # get all the volume .T[0] [[volume, free_energy], ...]

    # dL_L_nv = {pressure: np.power(np.array(equilibrium_volume[pressure]).T[0] / static_volume, 1 / 3)
    #            for pressure in pressure_sample}
    # for pressure in dL_L_nv:
    #     dL_L_nv[pressure] = dL_L_nv[pressure] / dL_L_nv[pressure][0] - 1
    #
    # coef_nv_dict = {}
    # for pressure in dL_L_nv:
    #     coef_nv, _ = curve_fit(forth_order_polynomial, temperature_sample, dL_L_nv[pressure])
    #     coef_nv_dict[pressure] = np.append(coef_nv, [0, 0])
    #     print(coef_nv)
    # ----------------------------------------------------------------------------------
    # plot alpha

    # fig = plt.figure()
    # ax1 = fig.add_subplot(111)
    # exp_alpha = ax1.plot(T, 1e6 * einstein_model()[0](T), label=r"$\alpha=\frac{1}{L}\cdot\frac{dL}{dT}$", color="r",
    #                      linestyle="dashed")
    # calc_alpha = ax1.plot(T, 1e6 * np.poly1d(np.polyder(coef))(T), label=r"$\alpha$", color="r")
    #
    # ax1.set_xlabel("$T$ (K)")
    # ax1.set_ylabel(r"$\alpha~(\rm ×10^{-6}~K^{-1})$")
    # ax1.legend(plots, labels)
    # ax1.minorticks_on()
    # ax1.tick_params(axis='both', which='major', labelsize=15)
    # ---------------------------------------------------------------------------------------
    # plot thermal expansion

    # fig = plt.figure()
    # ax2 = fig.add_subplot(111)
    # # for pressure in coef_nv_dict:
    # #     ax2.plot(T, 1e3 * np.poly1d(coef_nv_dict[pressure])(T), label=f"{round(pressure)} GPa")
    # #     ax2.scatter(temperature_sample, 1e3 * dL_L_nv[pressure], marker="x")
    #
    # # ax2.plot(T, 1e3 * np.poly1d(coef)(T), label="diamond")
    # # ax2.plot(T, 1e3 * einstein_model()[1](T), label="expt")
    #
    # ax2.set_xlabel("$T$ (K)")
    # ax2.set_ylabel(r"$\frac{\delta L}{L}$ (×10$^{-3}$)")
    # ax2.minorticks_on()
    # # ax2.ticklabel_format(style='sci', scilimits=(-1, 2), axis='y')
    # ax2.tick_params(axis='both', which='major', labelsize=15)
    # # plt.yscale("log")
    # plt.legend()
    # plt.tight_layout()
    # --------------------------------------------------------------------------
    # [pressure, t, scale]

    # eos = json.load(open(work_dir + "\eos_ptv_64.json", "r"))
    # p_dict = {}  # {p: [t, scale]}
    # t_dict = {}  # {t: [p, scale]}
    # for state in eos:
    #     # get v_0
    #     if state[:2] == [0., 0.]:
    #         v_0 = state[2]
    #         print(f"target = {v_0}")
    #     # generate p_dict
    #     if state[0] in p_dict:
    #         p_dict[state[0]].append(state[1:])
    #     else:
    #         p_dict[state[0]] = [state[1:]]
    #     # generate v_dict
    #     if state[1] in t_dict:
    #         t_dict[state[1]].append(state[::2])
    #     else:
    #         t_dict[state[1]] = [state[::2]]
    # -----------------------------------------------------------------
    # from eos plot thermal expansion (another way/check)

    # for pressure in p_dict:
    #     t_v = p_dict[pressure]
    #     t_v.sort(key=lambda x: x[0])
    #     t_v = np.array(t_v).T
    #     t_v[1] = t_v[1] / t_v[1][0] - 1
    #     ax2.plot(t_v[0], 1e3 * t_v[1], label=f"{round(pressure)} GPa")
    # plt.legend()
    # ------------------------------------------------------------
    # plot t-scale under different p

    # fig = plt.figure()
    # ax3 = fig.add_subplot(111)
    #
    # p_target = []
    # for temperature in t_dict:
    #     p_v = t_dict[temperature]
    #     p_v.sort(key=lambda x: x[0])
    #     p_v = np.array(p_v).T
    #
    #     # get balanced (P, T)
    #
    #     coef_nv, cov = np.polyfit(p_v[1], p_v[0], 2, cov=True)
    #     error_nv = np.sqrt(cov.diagonal())
    #     p_target.append(np.poly1d(coef_nv)(v_0))
    #
    #     if round(temperature) % 300 == 0:
    #         standard_index = np.where(p_v[0] == 0.0)
    #         p_v[1] = p_v[1] / p_v[1][standard_index] - 1
    #         # ax3.scatter(p_v[0], 1e3 * p_v[1], marker="x")
    #
    #         coef_nv, cov = np.polyfit(p_v[1], p_v[0], 2, cov=True)
    #         error_nv = np.sqrt(cov.diagonal())
    #         v_sample = np.linspace(p_v[1][0], p_v[1][-1], 100)
    #         print(coef_nv, error_nv)
    #         # ax3.plot(np.poly1d(coef_nv)(v_sample), 1e3 * v_sample, label=f"{round(temperature)} K")
    # ax3.set_xlabel("$P$ (GPa)")
    # ax3.set_ylabel(r"$\frac{\delta L}{L}$ (×10$^{-3}$)")
    # plt.legend()
    # -------------------------------------------------------------
    # plot balance

    # ax3.plot(t_dict.keys(), p_target)
    # ax3.set_xlabel("$T$ (K)")
    # ax3.set_ylabel("$P$ (GPa)")
    # ------------------------------------------------------
    # plt.show()
